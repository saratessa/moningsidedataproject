---
title: "index"
format: html
editor: visual
---

Tidying Deidentified Data

Load Packages

```{r}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(janitor) 
library(readxl)
library(dplyr)
library(lme4)
library(lmerTest)
```

Bring in Identified Data, Merge Cohorts, Remove Names (2008-2009 and 2009-2010)

(Note: this code is for first import and is DONE: cohort1.csv is in the repo)

```{r}
#Bringing in year 1

df_2008 <- read_excel("G:/My Drive/3. Research/Morningside Data Project/identified data files/2008-2009 pre-post.xlsx") %>%
  clean_names() %>%
  mutate(year_start = 2008)

#Switching wide to long, renaming spring/fall to time 1 and 2

df_2008<- df_2008 %>%
  pivot_longer(
    cols = c(starts_with("FALL"), starts_with("SPRING")),
    names_to = c("Season", "Measure"),
    names_sep = "_",
    values_to = "Score"
  ) %>%
  mutate(
    Season = str_to_lower(Season),
    Time = case_when(
      Season == "fall" ~ 1,
      Season == "spring" ~ 2,
      TRUE ~ NA_real_
    )
  ) %>%
  select(-Season) 

view(df_2008)

#Bringing in year 2

df_2009 <- read_excel("G:/My Drive/3. Research/Morningside Data Project/identified data files/2009-2010 pre_post.xlsx") %>%
  clean_names() %>%
  mutate(year_start = 2009)

#Switching wide to long, renaming spring/fall to time 1 and 2

df_2009<- df_2009 %>%
  pivot_longer(
    cols = c(starts_with("FALL"), starts_with("SPRING")),
    names_to = c("Season", "Measure"),
    names_sep = "_",
    values_to = "Score"
  ) %>%
  mutate(
    Season = str_to_lower(Season),
    Time = case_when(
      Season == "fall" ~ 1,
      Season == "spring" ~ 2,
      TRUE ~ NA_real_
    )
  ) %>%
  select(-Season) 

view(df_2009)

#Binding year 1 and year 2 into the same frame

cohort1 <- bind_rows(df_2008, df_2009)
view(cohort1)

#Group by student and assign ID number

cohort1 <- cohort1 %>%
  group_by(name) %>%
  mutate(
    studentnum = cur_group_id(),
    id = paste0(studentnum, "0810") #for 2008-2010 cohort id
  ) %>%
  ungroup() %>%
  select(-studentnum) %>%
  select(-name) %>%
  relocate(id)


view(cohort1)

#make sure dfs are a dataframe and not a function
class(cohort1)
head(cohort1)
#cleaning names and variable types
colnames(cohort1)
names(cohort1)<- c("id", "grade", "cal_year", "measure", "score", "time")
cohort1 <- cohort1 %>%
  mutate(
    id = as.factor(id),
    cal_year = as.numeric(cal_year),
    grade = as.numeric(grade),
    time = as.numeric(time),     # 1 = fall, 2 = spring
    measure = as.factor(measure),
    score = as.numeric(score)
  )

#add a column to indicate program_year 1 or 2

cohort1 <- cohort1 %>%
  group_by(id) %>%
  mutate(
    # find the student's earliest year
    first_year = min(cal_year, na.rm = TRUE),
    # calculate how many years since the student's first year
    program_year = cal_year - first_year + 1
  ) %>%
     select(-first_year)


#student_year identifier
cohort1 <- cohort1 %>%
  mutate(student_year = paste(id, cal_year, sep = "_"))

#adding a column indicating literacy or math

cohort1 <- cohort1 %>%
  mutate(
    domain_type = case_when(
      measure %in% c("rc", "lang", "cap", "punc", "ue", "lwid", "wa", "rf", "wf", "ws") ~ "literacy",
      measure %in% c("ce", "psdi", "comp", "mf", "maths", "calc") ~ "math",
      TRUE ~ "other"
    )
  )

#adding a column with difference from score to actual grade level

cohort1 <- cohort1 %>%
  mutate(
    grade_diff = score - grade
  )

#adding columns for centered variables 

cohort1 <- cohort1 %>%
  mutate(
    grade_diff_c = grade_diff - mean(grade_diff, na.rm = TRUE), #interprets effect of being above/below average
    time_c = time - 1.5                                 # fall -.05 spring .05 for interpretability
  )

view(cohort1)
#Delete identified data frames from environment and proceed using cohort1.csv

write_csv(cohort1, "cohort1.csv")
rm(df_2008, df_2009, cohort1)
df1 <- read.csv("cohort1.csv")

```

Bring in Identified Data, Merge Cohorts, Remove Names (2015-2016 and 2016-2017)

(Note: this code is for first import and is DONE: cohort2.csv is in the repo)

```{r}
#Bringing in year 1

df_2015 <- read_excel("G:/My Drive/3. Research/Morningside Data Project/identified data files/2015-2016 pre-post.xlsx") %>%
  clean_names() %>%
  mutate(year_start = 2015)

#Switching wide to long, renaming spring/fall to time 1 and 2

df_2015<- df_2015 %>%
  pivot_longer(
    cols = c(starts_with("FALL"), starts_with("SPRING")),
    names_to = c("Season", "Measure"),
    names_sep = "_",
    values_to = "Score"
  ) %>%
  mutate(
    Season = str_to_lower(Season),
    Time = case_when(
      Season == "fall" ~ 1,
      Season == "spring" ~ 2,
      TRUE ~ NA_real_
    )
  ) %>%
  select(-Season) 

view(df_2015)

#Bringing in year 2

df_2016 <- read_excel("G:/My Drive/3. Research/Morningside Data Project/identified data files/2016-2017 pre-post.xlsx") %>%
  clean_names() %>%
  mutate(year_start = 2016)

#Switching wide to long, renaming spring/fall to time 1 and 2

df_2016<- df_2016 %>%
  pivot_longer(
    cols = c(starts_with("FALL"), starts_with("SPRING")),
    names_to = c("Season", "Measure"),
    names_sep = "_",
    values_to = "Score"
  ) %>%
  mutate(
    Season = str_to_lower(Season),
    Time = case_when(
      Season == "fall" ~ 1,
      Season == "spring" ~ 2,
      TRUE ~ NA_real_
    )
  ) %>%
  select(-Season) 

view(df_2016)

#Binding year 1 and year 2 into the same frame

cohort2 <- bind_rows(df_2015, df_2016)

cohort2 <- cohort2 %>%
  group_by(name) %>%
  mutate(
    studentnum = cur_group_id(),
    id = paste0(studentnum, "0810") #for 2008-2010 cohort id
  ) %>%
  ungroup() %>%
  select(-studentnum) %>%
  select(-name) %>%
  relocate(id)


view(cohort2)

#make sure dfs are a dataframe and not a function
class(cohort2)
head(cohort2)
#cleaning names and variable types
colnames(cohort2)
names(cohort2)<- c("id", "grade", "cal_year", "measure", "score", "time")
cohort2 <- cohort2 %>%
  mutate(
    id = as.factor(id),
    cal_year = as.numeric(cal_year),
    grade = as.numeric(grade),
    time = as.numeric(time),     # 1 = fall, 2 = spring
    measure = as.factor(measure),
    score = as.numeric(score)
  )


#add a column to indicate program_year 1 or 2

cohort2 <- cohort2 %>%
  group_by(id) %>%
  mutate(
    # find the student's earliest year
    first_year = min(cal_year, na.rm = TRUE),
    # calculate how many years since the student's first year
    program_year = cal_year - first_year + 1
  ) %>%
     select(-first_year)
 

#student_year identifier
cohort2 <- cohort2 %>%
  mutate(student_year = paste(id, cal_year, sep = "_"))

#adding a column indicating literacy or math

cohort2 <- cohort2 %>%
  mutate(
    domain_type = case_when(
      measure %in% c("rc", "lang", "cap", "punc", "ue", "lwid", "wa", "rf", "wf", "ws") ~ "literacy",
      measure %in% c("ce", "psdi", "comp", "mf", "maths", "calc") ~ "math",
      TRUE ~ "other"
    )
  )

#adding a column with difference from score to actual grade level

cohort2 <- cohort2 %>%
  mutate(
    grade_diff = score - grade
  )

#adding columns for centered variables 

cohort2 <- cohort2 %>%
  mutate(
    grade_diff_c = grade_diff - mean(grade_diff, na.rm = TRUE), #interprets effect of being above/below average
    time_c = time - 1.5)                   # fall -.05 spring .05 for interpretability
  


#Delete identified data frames from environment and proceed using cohort1.csv

write_csv(cohort2, "cohort2.csv")
rm(df_2015, df_2016, cohort2)
df2 <- read.csv("cohort2.csv")


```

Bring in Identified Data, Merge Cohorts, Remove Names (2023-2024 and 2024-2025)

(Note: not done, need data file for 24-25)

```{r}
#Bringing in year 1

df_2023 <- read_excel("G:/My Drive/3. Research/Morningside Data Project/identified data files/2023-2024 pre_post.xlsx") %>%
  clean_names() %>%
  mutate(year_start = 2023)

#Switching wide to long, renaming spring/fall to time 1 and 2

df_2023<- df_2023 %>%
  pivot_longer(
    cols = c(starts_with("FALL"), starts_with("SPRING")),
    names_to = c("Season", "Measure"),
    names_sep = "_",
    values_to = "Score"
  ) %>%
  mutate(
    Season = str_to_lower(Season),
    Time = case_when(
      Season == "fall" ~ 1,
      Season == "spring" ~ 2,
      TRUE ~ NA_real_
    )
  ) %>%
  select(-Season) 

view(df_2023)

#Bringing in year 2

df_2024 <- read_excel("G:/My Drive/3. Research/Morningside Data Project/identified data files/2024-2025 pre-post.xlsx") %>%
  clean_names() %>%
  mutate(year_start = 2024)

#Switching wide to long, renaming spring/fall to time 1 and 2

df_2024<- df_2024 %>%
  pivot_longer(
    cols = c(starts_with("FALL"), starts_with("SPRING")),
    names_to = c("Season", "Measure"),
    names_sep = "_",
    values_to = "Score"
  ) %>%
  mutate(
    Season = str_to_lower(Season),
    Time = case_when(
      Season == "fall" ~ 1,
      Season == "spring" ~ 2,
      TRUE ~ NA_real_
    )
  ) %>%
  select(-Season) 

view(df_2024)

#Binding year 1 and year 2 into the same frame
df_2023 <- df_2023 %>%
  mutate(
    grade = as.numeric(grade)
  )

cohort3 <- bind_rows(df_2023, df_2024)


cohort3 <- cohort3 %>%
  group_by(name) %>%
  mutate(
    studentnum = cur_group_id(),
    id = paste0(studentnum, "2325") #for 2023-2025 cohort id
  ) %>%
  ungroup() %>%
  select(-studentnum) %>%
  select(-name) %>%
  relocate(id)


view(cohort3)



#make sure dfs are a dataframe and not a function
class(cohort3)
head(cohort3)
#cleaning names and variable types
colnames(cohort3)
names(cohort3)<- c("id", "grade", "cal_year", "measure", "score", "time")
cohort3 <- cohort3 %>%
  mutate(
    id = as.factor(id),
    cal_year = as.numeric(cal_year),
    grade = as.numeric(grade),
    time = as.numeric(time),     # 1 = fall, 2 = spring
    measure = as.factor(measure),
    score = as.numeric(score)
  )

#add a column to indicate program_year 1 or 2

cohort3 <- cohort3 %>%
  group_by(id) %>%
  mutate(
    # find the student's earliest year
    first_year = min(cal_year, na.rm = TRUE),
    # calculate how many years since the student's first year
    program_year = cal_year - first_year + 1
  ) %>%
     select(-first_year)
 

#student_year identifier
cohort3 <- cohort3 %>%
  mutate(student_year = paste(id, cal_year, sep = "_"))

#adding a column indicating literacy or math

cohort3 <- cohort3 %>%
  mutate(
    domain_type = case_when(
      measure %in% c("rc", "lang", "cap", "punc", "ue", "lwid", "wa", "rf", "wf", "ws", "we", "ed", "towl") ~ "literacy",
      measure %in% c("ce", "psdi", "comp", "mf", "maths", "calc") ~ "math",
      TRUE ~ "other"
    )
  )

#adding a column with difference from score to actual grade level

cohort3 <- cohort3 %>%
  mutate(
    grade_diff = score - grade
  )

#adding columns for centered variables 

cohort3 <- cohort3 %>%
  mutate(
    grade_diff_c = grade_diff - mean(grade_diff, na.rm = TRUE), #interprets effect of being above/below average
    time_c = time - 1.5)                   # fall -.05 spring .05 for interpretability



#Delete identified data frames from environment and proceed using cohort1.csv

write_csv(cohort3, "cohort3.csv")
rm(df_2023, df_2024, cohort3)
df3 <- read.csv("cohort3.csv")


view(df3)
```

Prep for Multilevel Modeling

Describing the Data

```{r}
df1 <- read.csv("cohort1.csv")
df2 <- read.csv("cohort2.csv")
df3 <- read.csv("cohort3.csv")
df_all <- bind_rows(df1, df2, df3)
```

```{r}


df_growth <- df_all %>%
  arrange(id, program_year, measure, time) %>%
  group_by(id, measure, domain_type, program_year) %>%
  summarise(
    growth = diff(score),             # spring – fall gain
    start_grade_diff = first(grade_diff),  # how far behind/ahead they started
    .groups = "drop"
  )

df_growth$program_year_f <- factor(df_growth$program_year, levels = c(1, 2))



```

Multilevel Modeling

```{r}


# 3. Three-level multilevel model
# Outcome: score
# Predictors: time, grade_diff, domain_type
# Random effects: student intercept + slope, program year intercept
# -----------------------------


model_prog_year  <- lmer(
  growth ~ program_year_f * domain_type + start_grade_diff + (1 | id),
  data = df_growth
)

summary(model_prog_year)


```

```{r}

library(ggeffects)
library(ggplot2)

# Get predicted means
preds <- ggpredict(model_prog_year, terms = c("program_year_f", "domain_type"))

# Plot predicted growth for Year 1 and Year 2 only
ggplot(preds, aes(x = x, y = predicted, color = group)) +
  geom_point(size = 3) +
  geom_line(aes(group = group), size = 1) +
  geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.1) +
  scale_x_discrete(labels = c("Year 1", "Year 2")) +
  theme_minimal(base_size = 14) +
  labs(
    x = "Program Year",
    y = "Predicted Growth (Grade Equivalent Units)",
    color = "Domain",
    title = "Predicted Growth by Program Year and Domain Type"
  )
```
